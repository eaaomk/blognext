import{_ as t,V as d,W as r,Z as a}from"./framework-bcbeea85.js";const i="/blognext/images/android.png",e={},n=a('<h1 id="android-系统框架" tabindex="-1"><a class="header-anchor" href="#android-系统框架" aria-hidden="true">#</a> Android 系统框架</h1><p>Android 是一种基于 Linux 的开放源代码软件栈，为各类设备和机型而创建。下图所示为 Android 平台的主要组件。</p><blockquote></blockquote><figure><img src="'+i+'" alt="架构图" tabindex="0" loading="lazy"><figcaption>架构图</figcaption></figure><h3 id="linux-内核" tabindex="-1"><a class="header-anchor" href="#linux-内核" aria-hidden="true">#</a> Linux 内核</h3><p>Android 平台的基础是 Linux 内核。例如，Android Runtime (ART) 依靠 Linux 内核来执行底层功能，例如线程和低层内存管理。 使用 Linux 内核可让 Android 利用主要安全功能，并且允许设备制造商为内核开发硬件驱动程序。</p><ul><li>Android基于Linux提供核心系统服务，例如安全、内存管理、进程管理、网络堆栈、驱动模型。</li><li>除了标准的 Linux 内核外，Android 还增加了内核的驱动程序，如Binder(IPC)驱动、显示驱动、输入设备驱动、音频系统驱动、摄像头驱动、WiFi驱动、蓝牙驱动、电源管理。</li></ul><h3 id="硬件抽象层-hal" tabindex="-1"><a class="header-anchor" href="#硬件抽象层-hal" aria-hidden="true">#</a> 硬件抽象层 (HAL)</h3><p>硬件抽象层 (HAL) 提供标准界面，向更高级别的 Java API 框架显示设备硬件功能。HAL 包含多个库模块，其中每个模块都为特定类型的硬件组件实现一个界面，例如相机或蓝牙模块。当框架 API 要求访问设备硬件时，Android 系统将为该硬件组件加载库模块。</p><h3 id="android-runtime" tabindex="-1"><a class="header-anchor" href="#android-runtime" aria-hidden="true">#</a> Android Runtime</h3><p>对于运行 Android 5.0（API 级别 21）或更高版本的设备，每个应用都在其自己的进程中运行，并且有其自己的 Android Runtime (ART) 实例。ART 编写为通过执行 DEX 文件在低内存设备上运行多个虚拟机，DEX 文件是一种专为 Android 设计的字节码格式，经过优化，使用的内存很少。编译工具链（例如 Jack）将 Java 源代码编译为 DEX 字节码，使其可在 Android 平台上运行。 ART 的部分主要功能包括：</p><ul><li>预先 (AOT) 和即时 (JIT) 编译</li><li>优化的垃圾回收 (GC)</li><li>在 Android 9（API 级别 28）及更高版本的系统中，支持将应用软件包中的 Dalvik Executable 格式 (DEX) 文件转换为更紧凑的机器代码。</li><li>更好的调试支持，包括专用采样分析器、详细的诊断异常和崩溃报告，并且能够设置观察点以监控特定字段</li></ul><p>在 Android 版本 5.0（API 级别 21）之前，Dalvik 是 Android Runtime。如果您的应用在 ART 上运行效果很好，那么它应该也可在 Dalvik 上运行，但反过来不一定。</p><p>Android 还包含一套核心运行时库，可提供 Java API 框架所使用的 Java 编程语言中的大部分功能，包括一些 Java 8 语言功能。</p><h3 id="原生-c-c-库" tabindex="-1"><a class="header-anchor" href="#原生-c-c-库" aria-hidden="true">#</a> 原生 C/C++ 库</h3><p>许多核心 Android 系统组件和服务（例如 ART 和 HAL）构建自原生代码，需要以 C 和 C++ 编写的原生库。Android 平台提供 Java 框架 API 以向应用显示其中部分原生库的功能。例如，您可以通过 Android 框架的 Java OpenGL API 访问 OpenGL ES，以支持在应用中绘制和操作 2D 和 3D 图形。 如果开发的是需要 C 或 C++ 代码的应用，可以使用 Android NDK 直接从原生代码访问某些原生平台库。</p><table><thead><tr><th>A</th><th>B</th></tr></thead><tbody><tr><td>系统C语言库</td><td>标准C语言系统库 (libc) 的 BSD 衍生，调整为基于嵌入式 Linux 设备</td></tr><tr><td>多媒体库</td><td>基于 PacketVideo 的 OpenCORE，这些库支持播放和录制许多流行的音频和视频格式，以及静态图像文件，包括 MPEG4、H.264、MP3、AAC、AMR、JPG、PNG</td></tr><tr><td>图层管理（Surface Manager）</td><td>对显示子系统的管理，并且为多个应用程序提供 2D 和 3D 图层的无缝融合</td></tr><tr><td>SQLite</td><td>轻量级关系数据库引擎</td></tr><tr><td>3D库</td><td>基于OpenFLES1.0 APLs实现，该库可以使用硬件3D加速或者使用高度优化3D软加速</td></tr><tr><td>FreeType</td><td>位图与矢量字体显示渲染</td></tr><tr><td>LibWebCore</td><td>新式的 Web 浏览器引擎，支持 Android 浏览器和内嵌的 Web 视图</td></tr><tr><td>SGL</td><td>内置的2D图形引擎</td></tr><tr><td>SSL</td><td>支持数据通信</td></tr></tbody></table><h3 id="java-api-框架" tabindex="-1"><a class="header-anchor" href="#java-api-框架" aria-hidden="true">#</a> Java API 框架</h3><p>可通过以 Java 语言编写的 API 使用 Android OS 的整个功能集。这些 API 形成创建 Android 应用所需的构建块，它们可简化核心模块化系统组件和服务的重复使用，包括以下组件和服务：</p><table><thead><tr><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>位置管理器</td><td>Location Manager</td><td>提供地理位置及定位功能服务</td></tr><tr><td>包管理器</td><td>Package Manager</td><td>管理所有安装在Android系统中的应用程序</td></tr><tr><td>通知管理器</td><td>Notification Manager</td><td>使应用程序可以在状态栏中显示自定义的提示信息</td></tr><tr><td>资源管理器</td><td>Resource Manager</td><td>提供应用程序使用的各种非代码资源，如本地字</td></tr><tr><td>电话管理器</td><td>Telephony Manager</td><td>管理所有的移动设备功能</td></tr><tr><td>窗口管理器</td><td>Window Manager</td><td>管理所有开启的窗口程序</td></tr><tr><td>内容提供者</td><td>Content Provider</td><td>使不同应用程序之间可以共享数据</td></tr><tr><td>视图系统</td><td>View System</td><td>丰富的、可扩展的视图集合，可用于构建一个应用程序，包括列表(Lists)、网格(Grids)、文本框 (TextBoxes)、按钮(Buttons)，甚至是内嵌的Web浏览器</td></tr></tbody></table><h3 id="系统应用" tabindex="-1"><a class="header-anchor" href="#系统应用" aria-hidden="true">#</a> 系统应用</h3><p>Android 随附一套用于电子邮件、短信、日历、互联网浏览和联系人等的核心应用。平台随附的应用与用户可以选择安装的应用一样，没有特殊状态。因此第三方应用可成为用户的默认网络浏览器、短信 Messenger 甚至默认键盘（有一些例外，例如系统的“设置”应用）。</p><p>系统应用可用作用户的应用，以及提供开发者可从其自己的应用访问的主要功能。例如，如果一个应用要发短信，我们无需自己构建该功能，可以改为调用已安装的短信应用向指定的接收者发送消息。</p>',23),o=[n];function h(A,l){return d(),r("div",null,o)}const s=t(e,[["render",h],["__file","1.html.vue"]]);export{s as default};
