import{_ as n,V as a,W as s,Z as t}from"./framework-bcbeea85.js";const e={},p=t(`<h1 id="android-基础-2" tabindex="-1"><a class="header-anchor" href="#android-基础-2" aria-hidden="true">#</a> Android 基础 2</h1><h2 id="相对布局relativelayout" tabindex="-1"><a class="header-anchor" href="#相对布局relativelayout" aria-hidden="true">#</a> 相对布局RelativeLayout</h2><p>RelativeLayout下级视图的位置是相对位置，得有具体的参照物才能确定最终位置。 如果不设定下级视图的参照物，那么下级视图默认显示在RelativeLayout内部的左上角。 用于确定视图位置的参照物分两种，一种是与该视图自身平级的视图，另一种是该视图的上级视图（RelativeLayout）</p><p>下面将介绍部分属性，其他的属性可以顾名思义、以此类推</p><table><thead><tr><th>XML中的相对属性位置</th><th>说明</th></tr></thead><tbody><tr><td>layout_toLeftOf</td><td>当前视图在指定视图的左边</td></tr><tr><td>layout_above</td><td>当前视图在指定视图的上方</td></tr><tr><td>layout_below</td><td>当前视图在指定视图的下方</td></tr><tr><td>layout_alignLeft</td><td>当前视图与指定视图的左侧对齐</td></tr><tr><td>layout_centerVertical</td><td>当前视图在上级视图中的竖直方向上居中</td></tr><tr><td>layout_alignParentLeft</td><td>当前视图与上级视图左侧靠齐</td></tr></tbody></table><h2 id="框架布局framelayout" tabindex="-1"><a class="header-anchor" href="#框架布局framelayout" aria-hidden="true">#</a> 框架布局FrameLayout</h2><p>FrameLayout也是较常用的布局，其下级视图无法指定所处的位置，只能统统从上级FrameLayout的左上角开始添加，并且后面添加的子视图会把之前的子视图覆盖掉。 框架布局一般用于需要重叠显示的场合，比如绘图、游戏界面等，常见属性说明如下。</p><div class="language-mk line-numbers-mode" data-ext="mk"><pre class="language-mk"><code>foreground：指定框架布局的前景图像。该图像在框架内部永远处于最顶层，不会被框架内的其他视图覆盖。
foregroundGravity：指定前景图像的对齐方式。该属性的取值说明同gravity。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复选框checkbox" tabindex="-1"><a class="header-anchor" href="#复选框checkbox" aria-hidden="true">#</a> 复选框CheckBox</h2><h3 id="compoundbutton" tabindex="-1"><a class="header-anchor" href="#compoundbutton" aria-hidden="true">#</a> CompoundButton</h3><p>在Android体系中，CompoundButton类是抽象的复合按钮，因为是抽象类，所以不能直接使用。 实际开发中用的是CompoundButton类的几个派生类，主要有复选框CheckBox、单选按钮RadioButton以及开关按钮Switch，这些派生类都可使用CompoundButton的属性和方法。CompoundButton在布局文件中主要使用下面两个属性。</p><div class="language-mk line-numbers-mode" data-ext="mk"><pre class="language-mk"><code>checked：指定按钮的勾选状态，true表示勾选，false表示未勾选。默认未勾选。
button：指定左侧勾选图标的图形。如果不指定就使用系统的默认图标。

# CompoundButton在代码中可使用下列4种方法进行设置。
setChecked：设置按钮的勾选状态。
setButtonDrawable：设置左侧勾选图标的图形。
setOnCheckedChangeListener：设置勾选状态变化的监听器。
isChecked：判断按钮是否勾选。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="checkbox" tabindex="-1"><a class="header-anchor" href="#checkbox" aria-hidden="true">#</a> CheckBox</h3><p>复选框CheckBox是CompoundButton一个最简单的实现，点击复选框勾选，再次点击取消勾选。 CheckBox通过setOnCheckedChangeListener方法设置勾选监听器，对应的监听器要实现接口CompoundButton.OnCheckedChangeListener。</p><h2 id="开关按钮switch" tabindex="-1"><a class="header-anchor" href="#开关按钮switch" aria-hidden="true">#</a> 开关按钮Switch</h2><p>Switch是开关按钮，Android从4.0版本开始支持该控件。其实Switch是一个高级版本的CheckBox，在选中与取消选中时可展现的界面元素比CheckBox丰富。</p><p>Switch新添加的属性和设置方法如下：</p><table><thead><tr><th>XML中的属性</th><th>代码设置的方法</th><th>说明</th></tr></thead><tbody><tr><td>textOn</td><td>setTextOn</td><td>设置开启时的文本</td></tr><tr><td>textOff</td><td>setTextOff</td><td>设置关闭时的文本</td></tr><tr><td>switchPadding</td><td>setSwitchPadding</td><td>设置左右两个开关按钮之间的距离</td></tr><tr><td>thumbTextPadding</td><td>setThumbTextPadding</td><td>设置文本左右两边的距离。如果这个值设置了switchPadding 属性会失效</td></tr><tr><td>thumb</td><td>setThumbDrable/Resource</td><td>设置开关轨道的背景</td></tr><tr><td>track</td><td>setTrackDrable/Resource</td><td>设置开关标识的图标</td></tr></tbody></table><h2 id="单选按钮radiobutton" tabindex="-1"><a class="header-anchor" href="#单选按钮radiobutton" aria-hidden="true">#</a> 单选按钮RadioButton</h2><p>单选按钮要在一组按钮中选择其中一项，并且不能多选，这要求有个容器确定这组按钮的范围，这个容器便是RadioGroup。</p><p>RadioGroup实质上是个布局，同一组RadioButton都要放在同一个RadioGroup节点下。RadioGroup有orientation属性可指定下级控件的排列方向，该属性为horizontal时，单选按钮在水平方向排列；该属性为vertical时，单选按钮在垂直方向排列。RadioGroup下面除了RadioButton，还可以挂载其他子控件（如TextView、ImageView等）。</p><p>RadioGroup就是一个特殊的线性布局，只不过多了管理单选按钮的功能。下面是RadioGroup常用的3个方法。</p><div class="language-mk line-numbers-mode" data-ext="mk"><pre class="language-mk"><code>check：选中指定资源编号的单选按钮。
getCheckedRadioButtonId：获取选中状态单选按钮的资源编号。
setOnCheckedChangeListener：设置单选按钮勾选变化的监听器。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RadioButton默认未选中，点击后显示选中，但是再次点击不会取消选中。只有点击同组的其他单选按钮时，原来选中的单选按钮才会取消选中。</p><p>另外，单选按钮的选中事件一般不由RadioButton处理，而是由RadioGroup响应。选中事件在实现时，首先要写一个单选监听器实现接口RadioGroup.OnCheckedChangeListener，然后调用RadioGroup对象的setOnCheckedChangeListener方法注册该监听器。</p><ul><li>tip: RadioButton经常会更换按钮图标，如果通过button属性变更图标，那么图标与文字就会挨得很近，为了拉开图标与文字之间的距离，得换成drawableLeft属性展示新图标（不要忘了把button改为@null），此时再设置drawablePadding即可指定间隔距离。</li></ul><div class="language-mk line-numbers-mode" data-ext="mk"><pre class="language-mk"><code>button：主要用于图标大小要求不高，间隔要求也不高的场合。
background：主要用于能够以较大空间显示图标的场合。
drawableLeft：主要用于对图标与文字之间的间隔有要求的场合。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="下拉框spinner" tabindex="-1"><a class="header-anchor" href="#下拉框spinner" aria-hidden="true">#</a> 下拉框Spinner</h2><p>Spinner是下拉框，用于从一串列表中选择某项，功能类似于单选按钮的组合。 下拉列表的展示方式有两种，一种是在当前下拉框的正下方展示列表，此时把spinnerMode属性设置为dropdown；另一种是在页面中部以对话框形式展示列表，此时把spinnerMode属性设置为dialog。另外，Spinner还可以在代码中调用下列4个方法。</p><div class="language-mk line-numbers-mode" data-ext="mk"><pre class="language-mk"><code>setPrompt：设置标题文字。
setAdapter：设置下拉列表的适配器。适配器可选择ArrayAdapter或SimpleAdapter。
setSelection：设置当前选中哪项。注意该方法要在setAdapter方法后调用。
setOnItemSelectedListener：设置下拉列表的选择监听器，该监听器要实现接口OnItemSelectedListener。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组适配器ArrayAdapter &amp; 简单适配器SimpleAdapter 过于简单，这里就不写了。</li></ul><h2 id="文本编辑框edittext" tabindex="-1"><a class="header-anchor" href="#文本编辑框edittext" aria-hidden="true">#</a> 文本编辑框EditText</h2><p>EditText是文本编辑框，用户可在此输入文本等信息。EditText的常用属性说明如下。</p><div class="language-mk line-numbers-mode" data-ext="mk"><pre class="language-mk"><code>inputType：指定输入的文本类型，代码中对应的方法是setInputType。输入类型的取值说明可以见下表，若同时使用多种文本类型，则可使用竖线“|”把多种文本类型拼接起来。
maxLength：指定文本允许输入的最大长度。该属性无法通过代码设置。
hint：指定提示文本的内容，代码中对应的方法是setHint。
textColorHint：指定提示文本的颜色，代码中对应的方法是setHintTextColor。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>输入类型</th><th>说明</th></tr></thead><tbody><tr><td>text</td><td>文本</td></tr><tr><td>textPassword</td><td>文本密码，显示时用 * 符号代替</td></tr><tr><td>number</td><td>整型数</td></tr><tr><td>numberSigned</td><td>带符号的数字，允许在开头带负号</td></tr><tr><td>numberDecimal</td><td>带小数点的数字</td></tr><tr><td>numberPassword</td><td>数字密码，显示时用 * 符号代替</td></tr><tr><td>datetime</td><td>时间日期格式，除了数字以外，还允许输入横线、斜杠、空格、冒号</td></tr><tr><td>date</td><td>日期格式，除了数字外，还允许输入横线 - 和斜杠 /</td></tr><tr><td>time</td><td>时间格式，除了数字外，还允许输入冒号 ：</td></tr></tbody></table><p>除了上述文本与提示文本的基本操作外，实际开发中还常常关注4个方面：更换编辑框的光标、更换编辑框的边框、自动隐藏输入法、输入回车符自动跳转。</p><h3 id="更换编辑框的光标" tabindex="-1"><a class="header-anchor" href="#更换编辑框的光标" aria-hidden="true">#</a> 更换编辑框的光标</h3><p>EditText与光标处理有关的属性主要有两个，分别是：cursorVisible，指定光标是否可见。代码中对应的方法是setCursorVisible。textCursorDrawable，指定光标的图像。该属性无法通过代码设置。如果要隐藏光标，就要把cursorVisible设置为false。如果要变更光标的样式，就要修改textCursorDrawable设置新图像。如图3-13所示，光标被换成自定义的红色竖线光标。</p><h3 id="更换编辑框的边框" tabindex="-1"><a class="header-anchor" href="#更换编辑框的边框" aria-hidden="true">#</a> 更换编辑框的边框</h3><p>EditText的边框通过background属性控制，如果要隐藏边框，就要把background设置为@null；如果要修改边框的样式，就要将background设置为其他边框图形。</p><h3 id="自动隐藏输入法" tabindex="-1"><a class="header-anchor" href="#自动隐藏输入法" aria-hidden="true">#</a> 自动隐藏输入法</h3><p>如果页面上有EditText控件，开发者又没做其他处理，那么用户打开该页面时往往会自动弹出输入法。这是因为编辑框会默认获得焦点，即默认模拟用户的点击操作，于是输入法的软键盘就弹出了。要想避免这种情况，就得阻止编辑框默认获得焦点。比较常见的做法是给该页面的根节点设置focusable和focusableInTouchMode属性，通过将这两个属性设置为true可强制让根节点获得焦点，从而避免输入法自动弹出的尴尬。由于软键盘通常会遮盖“登录”“确认”“下一步”等按钮，造成用户输入完毕得再点一次返回键才能关闭软键盘。大家都希望省事点，比如手机号输入满11位软键盘自动关闭，这样就会极大改善用户体验。</p><p>一个好用的App就是在这一点一滴中体现出来的。</p><p>想让编辑框文本达到指定长度时自动关闭输入法，开发者需要获得两个参数，第一个是该编辑框允许输入的最大长度，第二个是当前已经输入的文本长度。当已输入的文本长度等于最大长度时，即可触发关闭软键盘。自动隐藏输入法可分解为3个功能点，分别是获取编辑框的最大长度、监控当前已输入的文本长度和关闭软键盘。</p><p>（1）获取编辑框的最大长度前面提到maxLength属性可设置最大长度，但是EditText并没有直接提供获取最大长度的方法，不过开发者可以通过反射方式间接获得最大长度，具体代码参见本书附带源码middle模块里面ViewUtil.java的getMaxLength方法。</p><p>（2）监控当前已输入的文本长度这个监控操作用到一个文本监听器接口TextWatcher，该接口提供了3个监控方法，具体说明如下。</p><div class="language-mk line-numbers-mode" data-ext="mk"><pre class="language-mk"><code>beforeTextChanged：在文本改变之前触发。
onTextChanged：在文本改变过程中触发。
afterTextChanged：在文本改变之后触发。这里用到的是afterTextChanged方法，需要自己写个监听器实现TextWatcher接口，另外再给EditText对象调用addTextChangedListener方法注册该监听器。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）关闭软键盘输入法通过系统服务INPUT_METHOD_SERVICE管理，所以隐藏输入法也要通过该服务实现。下面是关闭软键盘的两种方式及其代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hideAllInputMethod</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从系统服务中获取输入法管理器</span>
        <span class="token class-name">InputMethodManager</span> inputMethodManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InputMethodManager</span><span class="token punctuation">)</span> activity<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">INPUT_METHOD_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>inputMethodManager<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 软键盘如果打开则关闭</span>
            inputMethodManager<span class="token punctuation">.</span><span class="token function">toggleSoftInput</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">InputMethodManager</span><span class="token punctuation">.</span><span class="token constant">HIDE_NOT_ALWAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hideOneInputMethod</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">,</span> <span class="token class-name">View</span> view<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 从系统服务中获取输入法管理器</span>
        <span class="token class-name">InputMethodManager</span> inputMethodManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InputMethodManager</span><span class="token punctuation">)</span> activity<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">INPUT_METHOD_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭屏幕上的输入法软键盘</span>
        inputMethodManager<span class="token punctuation">.</span><span class="token function">hideSoftInputFromWindow</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getWindowToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="输入回车符自动跳转" tabindex="-1"><a class="header-anchor" href="#输入回车符自动跳转" aria-hidden="true">#</a> 输入回车符自动跳转</h3><p>在录入用户信息时（比如输入姓名、密码等），往EditText控件输入回车键，常常不是换行而是让光标直接跳到下一个编辑框。 该功能也用到了文本监听器接口TextWatcher，主要监听用户是否输入回车符，如果监控到已输入回车符，就自动将焦点移到下一个控件，从而实现回车符自动跳转的要求。</p><p>下面是一个回车符监听器的代码例子，注意注释部分的文字说明：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">JumpTextWatcher</span> <span class="token keyword">implements</span> <span class="token class-name">TextWatcher</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EditText</span> thisView<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">View</span> nextView<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">JumpTextWatcher</span><span class="token punctuation">(</span><span class="token class-name">EditText</span> thisView<span class="token punctuation">,</span> <span class="token class-name">View</span> nextView<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>thisView <span class="token operator">=</span> thisView<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nextView <span class="token operator">=</span> nextView<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeTextChanged</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> charSequence<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTextChanged</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> charSequence<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterTextChanged</span><span class="token punctuation">(</span><span class="token class-name">Editable</span> editable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> editable<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断是否是回车符或者换行符</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;\\r&quot;</span><span class="token punctuation">)</span><span class="token operator">||</span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//去掉回车符和换行符</span>
            thisView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\r&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>nextView<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                nextView<span class="token punctuation">.</span><span class="token function">requestFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>nextView <span class="token keyword">instanceof</span> <span class="token class-name">EditText</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token class-name">Editable</span> editable1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">EditText</span><span class="token punctuation">)</span> nextView<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Selection</span><span class="token punctuation">.</span><span class="token function">setSelection</span><span class="token punctuation">(</span>editable1<span class="token punctuation">,</span>editable1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//((EditText) nextView).setSelection(editable1.length());</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自动完成编辑框autocompletetextview" tabindex="-1"><a class="header-anchor" href="#自动完成编辑框autocompletetextview" aria-hidden="true">#</a> 自动完成编辑框AutoCompleteTextView</h3><p>自动完成编辑框一般用于搜索文本框，如在电商App的搜索框输入商品文字时，下方会自动弹出提示词列表，方便用户快速选择具体商品。</p><p>AutoCompleteTextView的实现原理是：EditText结合监听器TextWatcher与下拉列表Spinner，一旦监控到EditText的文本发生变化，就自动弹出适配好的文字下拉列表，选中具体的下拉项向EditText填入相应文字。</p><table><thead><tr><th>xml属性值</th><th>代码设置</th><th>说明</th></tr></thead><tbody><tr><td>completionHint</td><td>setCompletionHint</td><td>设置下拉列表底部的提示文字</td></tr><tr><td>completionThreshold</td><td>setThreshold</td><td>设置至少输入多少个字符才会显示</td></tr><tr><td>dropDownHorizontalOffset</td><td>setDropDownHorizontalOffset</td><td>设置下拉列表与文本框之间的水平偏移</td></tr><tr><td>dropDownVerticalOffset</td><td>setDropDownVerticalOffset</td><td>设置下拉列表与文本框之间的垂直偏移</td></tr><tr><td>dropDownHeight</td><td>setDropDownHeight</td><td>设置下拉列表的高度</td></tr><tr><td>dropDownWidth</td><td>setDropDownWidth</td><td>设置下拉列表的宽度</td></tr><tr><td>无</td><td>setAdapter</td><td>设置数据适配器</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> hintArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;第一个&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;第二个&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token class-name">AutoCompleteTextView</span> completeTextView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoCompleteTextView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 completeTextView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>布局文件<span class="token punctuation">,</span>hintArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="activity基础" tabindex="-1"><a class="header-anchor" href="#activity基础" aria-hidden="true">#</a> Activity基础</h2><h3 id="activity的生命周期" tabindex="-1"><a class="header-anchor" href="#activity的生命周期" aria-hidden="true">#</a> Activity的生命周期</h3><p>Activity的生命周期，如同花开花落一般，Activity也有从含苞待放到盛开再到凋零的生命过程。下面是Activity与生命周期有关的方法说明。</p><div class="language-mk line-numbers-mode" data-ext="mk"><pre class="language-mk"><code>onCreate：创建页面。把页面上的各个元素加载到内存中。
onStart：开始页面。把页面显示在屏幕上。
onResume：恢复页面。让页面在屏幕上活动起来，例如开启动画、开始任务等。
onPause：暂停页面。让页面在屏幕上的动作停下来。
onStop：停止页面。把页面从屏幕上撤下来。
onDestroy：销毁页面。把页面从内存中清除掉。
onRestart：重启页面。重新加载内存中的页面数据。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对几个常见的业务场景探究一下Activity的生命周期，主要有3个场景：页面之间的跳转、竖屏与横屏的切换、按HOME键与返回App。</p><p>用于场景测试的代码如下，主要在每个生命周期函数中增加打印屏幕日志和后台日志。</p>`,64),i=[p];function o(c,d){return a(),s("div",null,i)}const u=n(e,[["render",o],["__file","3.html.vue"]]);export{u as default};
