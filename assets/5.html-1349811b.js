import{_ as n,V as a,W as s,Z as t}from"./framework-bcbeea85.js";const e="/blognext/images/activity_lifecycle.png",i="/blognext/images/diagram_backstack.png",p="/blognext/images/diagram_multitasking.png",c="/blognext/images/diagram_backstack_singletask_multiactivity.png",o={},l=t(`<h1 id="activity-基础知识" tabindex="-1"><a class="header-anchor" href="#activity-基础知识" aria-hidden="true">#</a> Activity 基础知识</h1><p>移动应用体验与桌面体验的不同之处在于，用户与应用的互动并不总是在同一位置开始，而是经常以不确定的方式开始。例如，如果从主屏幕打开电子邮件应用，可能会看到电子邮件列表，如果通过社交媒体应用启动电子邮件应用，则可能会直接进入电子邮件应用的邮件撰写界面。</p><p>Activity 类的目的就是促进这种范式的实现。当一个应用调用另一个应用时，调用方应用会调用另一个应用中的 Activity，而不是整个应用。通过这种方式，Activity 充当了应用与用户互动的入口点。</p><h2 id="配置清单" tabindex="-1"><a class="header-anchor" href="#配置清单" aria-hidden="true">#</a> 配置清单</h2><h3 id="声明-activity" tabindex="-1"><a class="header-anchor" href="#声明-activity" aria-hidden="true">#</a> 声明 Activity</h3><p>Acitivty 必须要在清单文件xml 中声明</p><p>activity元素是application元素的子元素：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name">...</span> <span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span> <span class="token attr-name">...</span> <span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.ExampleActivity<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
          ...
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span> <span class="token attr-name">...</span> <span class="token punctuation">&gt;</span></span>
      ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span> <span class="token punctuation">&gt;</span></span>
    

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>activity元素唯一的必要属性是 android:name，该属性用于指定 Activity 的类名称。也可以添加用于定义标签、图标或界面主题等 Activity 特征的属性</p><h3 id="声明-intent-过滤器" tabindex="-1"><a class="header-anchor" href="#声明-intent-过滤器" aria-hidden="true">#</a> 声明 intent 过滤器</h3><p>在 activity 元素中声明 intent-filter 属性。此元素的定义包括 action 元素，以及可选的 category 元素和/或 data 元素。这些元素组合在一起，可以指定 Activity 能够响应的 intent 类型。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>// 发送文本数据并接收其他 Activity 的文本数据发送请求
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.ExampleActivity<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@drawable/app_icon<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.action.SEND<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.category.DEFAULT<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/plain<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// Create the text message with a string</span>
    <span class="token class-name">Intent</span> sendIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sendIntent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_SEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sendIntent<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sendIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">EXTRA_TEXT</span><span class="token punctuation">,</span> textMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Start the activity</span>
    <span class="token function">startActivity</span><span class="token punctuation">(</span>sendIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>借助这项功能，可以根据显式请求启动 Activity，还可以根据隐式请求启动 Activity。</p><h3 id="声明权限" tabindex="-1"><a class="header-anchor" href="#声明权限" aria-hidden="true">#</a> 声明权限</h3><p>假设一个应用应用想要使用一个名为 SocialApp 的应用在社交媒体上分享文章，则 SocialApp 本身必须定义调用它的应用所需具备的权限：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> // SocialApp
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>....<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">android:</span>permission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”com.google.socialapp.permission.SHARE_POST”</span>

    <span class="token punctuation">/&gt;</span></span>
    
// 其他要调用SocialApp的app
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">&gt;</span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.google.socialapp.permission.SHARE_POST<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p>Activity 类提供六个核心回调：onCreate()、onStart()、onResume()、onPause()、onStop() 和 onDestroy() 如图所示：</p><figure><img src="`+e+`" alt="生命周期图" tabindex="0" loading="lazy"><figcaption>生命周期图</figcaption></figure><h3 id="oncreate" tabindex="-1"><a class="header-anchor" href="#oncreate" aria-hidden="true">#</a> onCreate</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TextView</span> textView<span class="token punctuation">;</span>

<span class="token comment">// 活动实例的一些瞬时状态</span>
<span class="token class-name">String</span> gameState<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用超类onCreate以完成类似于视图层次结构的活动的创建</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 恢复实例状态</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>savedInstanceState <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        gameState <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token constant">GAME_STATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 设置此活动的用户界面布局</span>
    <span class="token comment">// 布局文件在项目res/layout/main_activity.xml文件中定义</span>
    <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>main_activity<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 初始化成员TextView，以便以后可以对其进行操作</span>
    textView <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>text_view<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 只有当存在以前使用onSaveInstanceState()保存的已保存实例时，才会调用此回调。</span>
<span class="token comment">// 我们在onCreate()中可以选择恢复一些状态</span>

<span class="token comment">// 此处的其他状态，可能在onStart()完成后可用。</span>
<span class="token comment">// savedInstanceState Bundle 与onCreate()中使用的Bundle 相同。</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onRestoreInstanceState</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token constant">TEXT_VIEW_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在活动可能被临时销毁时调用，在此处保存实例状态</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> outState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    outState<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token constant">GAME_STATE_KEY</span><span class="token punctuation">,</span> gameState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    outState<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token constant">TEXT_VIEW_KEY</span><span class="token punctuation">,</span> textView<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 调用父类以保存所有的视图层次结构</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="onstart" tabindex="-1"><a class="header-anchor" href="#onstart" aria-hidden="true">#</a> onStart</h3><p>当 Activity 进入“已开始”状态时，系统会调用此回调。onStart() 调用使 Activity 对用户可见，应用会为 Activity 进入前台并支持互动做准备:我们可以通过此方法来初始化维护界面的代码。</p><h3 id="onresume" tabindex="-1"><a class="header-anchor" href="#onresume" aria-hidden="true">#</a> onResume</h3><p>Activity 会在进入“已恢复”状态时来到前台，然后系统调用 onResume() 回调。这是应用与用户互动的状态。应用会一直保持这种状态，直到某些事件发生，让焦点远离应用。此类事件包括接到来电、用户导航到另一个 Activity，或设备屏幕关闭。 当发生中断事件时，Activity 进入“已暂停”状态，系统调用 onPause() 回调。 如果 Activity 从“已暂停”状态返回“已恢复”状态，系统将再次调用 onResume() 方法。</p><h3 id="onpause" tabindex="-1"><a class="header-anchor" href="#onpause" aria-hidden="true">#</a> onPause</h3><p>系统将此方法视为用户将要离开当前 Activity 的第一个标志（但这并不总是意味着 Activity 会被销毁）；此方法表示 Activity 不再位于前台（尽管在用户处于多窗口模式时 Activity 仍然可见）。使用 onPause() 方法暂停或调整当 Activity 处于“已暂停”状态时不应继续（或应有节制地继续）的操作，以及 做一些很快恢复的操作。Activity 进入此状态的原因有很多。例如：</p><ul><li>如 onResume() 部分所述，某个事件会中断应用执行。这是最常见的情况。</li><li>在 Android 7.0（API 级别 24）或更高版本中，有多个应用在多窗口模式下运行。无论何时，都只有一个应用（窗口）可以拥有焦点，因此系统会暂停所有其他应用。</li><li>有新的半透明 Activity（例如对话框）处于开启状态。只要 Activity 仍然部分可见但并未处于焦点之中，它便会一直暂停。</li></ul><h3 id="onstop" tabindex="-1"><a class="header-anchor" href="#onstop" aria-hidden="true">#</a> onStop</h3><p>如果当前Activity 不再对用户可见，说明其已进入“已停止”状态，因此系统将调用 onStop() 回调。例如，当新启动的 Activity 覆盖整个屏幕时，可能会发生这种情况。如果 Activity 已结束运行并即将终止，系统还可以调用 onStop()。</p><h3 id="ondestroy" tabindex="-1"><a class="header-anchor" href="#ondestroy" aria-hidden="true">#</a> onDestroy</h3><p>销毁 Activity 之前，系统会先调用 onDestroy()。系统调用此回调的原因如下：</p><ol><li>Activity 即将结束（由于用户彻底关闭 Activity 或由于系统为 Activity 调用 finish()）</li><li>由于配置变更（例如设备旋转或多窗口模式），系统暂时销毁 Activity</li></ol><h3 id="简单例子" tabindex="-1"><a class="header-anchor" href="#简单例子" aria-hidden="true">#</a> 简单例子</h3><p>Activity A 启动 Activity B 时的操作发生顺序：</p><ul><li>Activity A 的 onPause() 方法执行。</li><li>Activity B 的 onCreate()、onStart() 和 onResume() 方法依次执行（Activity B 现在具有用户焦点）。</li><li>然后，如果 Activity A 在屏幕上不再显示，其 onStop() 方法执行。</li></ul><h3 id="activity-状态更改" tabindex="-1"><a class="header-anchor" href="#activity-状态更改" aria-hidden="true">#</a> Activity 状态更改</h3><ol><li>配置发生了更改：</li></ol><p>有很多事件会触发配置更改。最显著的例子或许是横屏和竖屏之间的屏幕方向变化。其他情况，如语言或输入设备的改变等，也可能导致配置更改。</p><p>当配置发生更改时，Activity 会被销毁并重新创建。原始 Activity 实例将触发 onPause()、onStop() 和 onDestroy() 回调。系统将创建新的 Activity 实例，并触发 onCreate()、onStart() 和 onResume() 回调。</p><ol start="2"><li>多窗口模式支持和多窗口模式下的生命周期：</li></ol><p>在多窗口模式下，虽然用户可以看到两个应用，但只有与用户交互的应用位于前台且具有焦点。该 Activity 处于“已恢复”状态，而另一个窗口中的应用则处于“已暂停”状态。</p><p>当用户从应用 A 切换到应用 B 时，系统会对应用 A 调用 onPause()，对应用 B 调用 onResume()。每当用户在应用之间切换时，系统就会在这两种方法之间切换。</p><ol start="3"><li>Activity 或对话框显示在前台：</li></ol><ul><li>局部覆盖： 如果有新的 Activity 或对话框出现在前台，并且局部覆盖了正在进行的 Activity，则被覆盖的 Activity 会失去焦点并进入“已暂停”状态。然后，系统会调用 onPause()。 当被覆盖的 Activity 返回到前台并重新获得焦点时，会调用 onResume()。</li><li>完全覆盖： 如果有新的 Activity 或对话框出现在前台，夺取了焦点且完全覆盖了正在进行的 Activity，则被覆盖的 Activity 会失去焦点并进入“已停止”状态。然后，系统会快速地接连调用 onPause() 和 onStop()。 当被覆盖的 Activity 的同一实例返回到前台时，系统会对该 Activity 调用 onRestart()、onStart() 和 onResume()。如果被覆盖的 Activity 的新实例进入后台，则系统不会调用 onRestart()，而只会调用 onStart() 和 onResume()。</li></ul><ol start="4"><li>用户点按“返回”按钮：</li></ol><p>如果 Activity 位于前台，并且用户点按了返回按钮，Activity 将依次经历 onPause()、onStop() 和 onDestroy() 回调。活动不仅会被销毁，还会从返回堆栈中移除。 在这种情况下，默认不会触发 onSaveInstanceState() 回调。此行为基于的假设是，用户点按返回按钮时不期望返回 Activity 的同一实例。不过，我们可以通过替换 onBackPressed() 方法实现某种自定义行为，例如“confirm-quit”对话框。如果替换 onBackPressed() 方法，应该从被替换的方法调用 super.onBackPressed()。否则，返回按钮的行为可能会让用户感觉突兀。</p><ol start="5"><li>系统终止应用进程：</li></ol><p>系统永远不会直接终止 Activity 以释放内存，而是会终止 Activity 所在的进程。系统不仅会销毁 Activity，还会销毁在该进程中运行的所有其他内容。</p><h2 id="任务和返回堆栈" tabindex="-1"><a class="header-anchor" href="#任务和返回堆栈" aria-hidden="true">#</a> 任务和返回堆栈</h2><p>在当前 Activity 启动另一个 Activity 时，新的 Activity 将被推送到堆栈顶部并获得焦点。上一个 Activity 仍保留在堆栈中，但会停止。当 Activity 停止时，系统会保留其界面的当前状态。当用户按返回按钮时，当前 Activity 会从堆栈顶部退出（该 Activity 销毁），上一个 Activity 会恢复（界面会恢复到上一个状态）。堆栈中的 Activity 永远不会重新排列，只会被送入和退出，在当前 Activity 启动时被送入堆栈，在用户使用返回按钮离开时从堆栈中退出。因此，返回堆栈按照“后进先出”的对象结构运作。</p><figure><img src="`+i+'" alt="图1" tabindex="0" loading="lazy"><figcaption>图1</figcaption></figure><p>任务是一个整体单元，当用户开始一个新任务或通过主屏幕按钮进入主屏幕时，任务可移至“后台”。在后台时，任务中的所有 Activity 都会停止，但任务的返回堆栈会保持不变，当其他任务启动时，当前任务只是失去了焦点。</p><figure><img src="'+p+'" alt="图2" tabindex="0" loading="lazy"><figcaption>图2</figcaption></figure><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结：</h3><ul><li>当 Activity A 启动 Activity B 时，Activity A 会停止，但系统会保留其状态（例如滚动位置和输入到表单中的文本）。如果用户在 Activity B 中按返回按钮，系统会恢复 Activity A 及其状态。</li><li>当用户通过按主屏幕按钮离开任务时，当前 Activity 会停止，其任务会转到后台。系统会保留任务中每个 Activity 的状态。如果用户稍后通过点按该任务的启动器图标来恢复该任务，该任务会进入前台并恢复堆栈顶部的 Activity。</li><li>如果用户按返回按钮，当前 Activity 将从堆栈中退出并销毁。堆栈中的上一个 Activity 将恢复。Activity 被销毁后，系统不会保留该 Activity 的状态。</li><li>Activity 可以多次实例化，甚至是从其他任务对其进行实例化。</li></ul><h2 id="启动模式" tabindex="-1"><a class="header-anchor" href="#启动模式" aria-hidden="true">#</a> 启动模式</h2><h3 id="清单配置" tabindex="-1"><a class="header-anchor" href="#清单配置" aria-hidden="true">#</a> 清单配置</h3><p>为 launchMode 属性指定 4 种不同的启动模式：</p><h4 id="standard-默认模式" tabindex="-1"><a class="header-anchor" href="#standard-默认模式" aria-hidden="true">#</a> &quot;standard&quot;（默认模式）</h4><p>默认值。系统在启动该 Activity 的任务中创建 Activity 的新实例，并将 intent 传送给该实例。Activity 可以多次实例化，每个实例可以属于不同的任务，一个任务可以拥有多个实例。</p><h4 id="singletop" tabindex="-1"><a class="header-anchor" href="#singletop" aria-hidden="true">#</a> &quot;singleTop&quot;</h4><p>如果当前任务的顶部已存在 Activity 的实例，则系统会通过调用其 onNewIntent() 方法来将 intent 转送给该实例，而不是创建 Activity 的新实例。Activity 可以多次实例化，每个实例可以属于不同的任务，一个任务可以拥有多个实例（但前提是返回堆栈顶部的 Activity 不是该 Activity 的现有实例）。</p><p>例如，假设任务的返回堆栈包含根 Activity A 以及 Activity B、C 和位于顶部的 D（堆栈为 A-B-C-D；D 位于顶部）。收到以 D 类型 Activity 为目标的 intent。如果 D 采用默认的 &quot;standard&quot; 启动模式，则会启动该类的新实例，并且堆栈将变为 A-B-C-D-D。但是，如果 D 的启动模式为 &quot;singleTop&quot;，则 D 的现有实例会通过 onNewIntent() 接收 intent，因为它位于堆栈顶部，堆栈仍为 A-B-C-D。但是，如果收到以 B 类型 Activity 为目标的 intent，则会在堆栈中添加 B 的新实例，即使其启动模式为 &quot;singleTop&quot; 也是如此。</p><ul><li>注意：创建 Activity 的新实例后，用户可以按返回按钮返回到上一个 Activity。但是，当由 Activity 的现有实例处理新 intent 时，用户将无法通过按返回按钮返回到 onNewIntent() 收到新 intent 之前的 Activity 状态。</li></ul><h4 id="singletask" tabindex="-1"><a class="header-anchor" href="#singletask" aria-hidden="true">#</a> &quot;singleTask&quot;</h4><p>系统会创建新任务，并实例化新任务的根 Activity。但是，如果另外的任务中已存在该 Activity 的实例，则系统会通过调用其 onNewIntent() 方法将 intent 转送到该现有实例，而不是创建新实例。Activity 一次只能有一个实例存在。</p><ul><li>注意：虽然 Activity 在新任务中启动，但用户按返回按钮仍会返回到上一个 Activity。</li></ul><h4 id="singleinstance" tabindex="-1"><a class="header-anchor" href="#singleinstance" aria-hidden="true">#</a> &quot;singleInstance&quot;</h4><p>与 &quot;singleTask&quot; 相似，唯一不同的是系统不会将任何其他 Activity 启动到包含该实例的任务中。该 Activity 始终是其任务唯一的成员；由该 Activity 启动的任何 Activity 都会在其他的任务中打开。</p><p>再举个例子，Android 浏览器应用在 activity 元素中指定 singleTask 启动模式，由此声明网络浏览器 Activity 应始终在它自己的任务中打开。这意味着，如果我们的应用发出打开 Android 浏览器的 intent，系统不会将其 Activity 置于我们的应用所在的任务中，而是会为浏览器启动一个新任务，如果浏览器已经有任务在后台运行，则会将该任务转到前台来处理新 intent。</p><p>无论 Activity 是在新任务中启动的，还是在和启动它的 Activity 相同的任务中启动，用户按返回按钮都会回到上一个 Activity。但是，如果我们启动了指定 singleTask 启动模式的 Activity，而后台任务中已存在该 Activity 的实例，则系统会将该后台任务整个转到前台运行。此时，返回堆栈包含了转到前台的任务中的所有 Activity，这些 Activity 都位于堆栈的顶部。</p><blockquote></blockquote><figure><img src="'+c+`" alt="采用“singleTask”启动模式的 Activity 添加到返回堆栈的过程图示。如果 Activity 已经存在于某个具有自己的返回堆栈的后台任务中，那么整个返回堆栈也会转到前台，覆盖当前任务。" tabindex="0" loading="lazy"><figcaption>采用“singleTask”启动模式的 Activity 添加到返回堆栈的过程图示。如果 Activity 已经存在于某个具有自己的返回堆栈的后台任务中，那么整个返回堆栈也会转到前台，覆盖当前任务。</figcaption></figure><h3 id="intent-配置" tabindex="-1"><a class="header-anchor" href="#intent-配置" aria-hidden="true">#</a> intent 配置</h3><p>可以使用以下标记来修改默认行为：</p><h4 id="flag-activity-new-task" tabindex="-1"><a class="header-anchor" href="#flag-activity-new-task" aria-hidden="true">#</a> FLAG_ACTIVITY_NEW_TASK</h4><p>在新任务中启动 Activity。如果我们现在启动的 Activity 已经有任务在运行，则系统会将该任务转到前台并恢复其最后的状态，而 Activity 将在 onNewIntent() 中收到新的 intent。 这与上一节中介绍的 &quot;singleTask&quot; launchMode 值产生的行为相同。</p><h4 id="flag-activity-single-top" tabindex="-1"><a class="header-anchor" href="#flag-activity-single-top" aria-hidden="true">#</a> FLAG_ACTIVITY_SINGLE_TOP</h4><p>如果要启动的 Activity 是当前 Activity（即位于返回堆栈顶部的 Activity），则现有实例会收到对 onNewIntent() 的调用，而不会创建 Activity 的新实例。 这与上面介绍的 &quot;singleTop&quot; launchMode 值产生的行为相同。</p><h4 id="flag-activity-clear-top" tabindex="-1"><a class="header-anchor" href="#flag-activity-clear-top" aria-hidden="true">#</a> FLAG_ACTIVITY_CLEAR_TOP</h4><p>如果要启动的 Activity 已经在当前任务中运行，则不会启动该 Activity 的新实例，而是会销毁位于它之上的所有其他 Activity，并通过 onNewIntent() 将此 intent 传送给它的已恢复实例（现在位于堆栈顶部）。 launchMode 属性没有可产生此行为的值。</p><p>FLAG_ACTIVITY_CLEAR_TOP 最常与 FLAG_ACTIVITY_NEW_TASK 结合使用。将这两个标记结合使用，可以查找其他任务中的现有 Activity，并将其置于能够响应 intent 的位置。</p><ul><li>注意：如果指定 Activity 的启动模式为 &quot;standard&quot;，系统也会将其从堆栈中移除，并在它的位置启动一个新实例来处理传入的 intent。这是因为当启动模式为 &quot;standard&quot; 时，始终会为新 intent 创建新的实例。</li></ul><h3 id="intentfilter匹配规则" tabindex="-1"><a class="header-anchor" href="#intentfilter匹配规则" aria-hidden="true">#</a> IntentFilter匹配规则</h3><h4 id="匹配规则" tabindex="-1"><a class="header-anchor" href="#匹配规则" aria-hidden="true">#</a> 匹配规则：</h4><ol><li>一个intent只有同时匹配某个Activity的intent-filter中的action、category、data才算完全匹配，才能启动该Activity。</li><li>一个Activity可以有多个 intent-filter，一个 intent只要成功匹配任意一组 intent-filter，就可以启动该Activity。</li></ol><h4 id="action匹配规则" tabindex="-1"><a class="header-anchor" href="#action匹配规则" aria-hidden="true">#</a> action匹配规则：</h4><p>要求intent中的action 存在且必须和intent-filter中的其中一个 action相同。 区分大小写。</p><h4 id="category匹配规则" tabindex="-1"><a class="header-anchor" href="#category匹配规则" aria-hidden="true">#</a> category匹配规则：</h4><p>intent中的category可以不存在，这是因为此时系统给该Activity 默认加上了&lt; category android:name=&quot;android.intent.category.DEAFAULT&quot; /&gt;属性值。 除上述情况外，有其他category，则要求intent中的category和intent-filter中的所有category 相同。</p><h4 id="data匹配规则" tabindex="-1"><a class="header-anchor" href="#data匹配规则" aria-hidden="true">#</a> data匹配规则：</h4><p>如果intent-filter中有定义data，那么Intent中也必须也要定义date。 data主要由mimeType(媒体类型)和URI组成。在匹配时通过intent.setDataAndType(Uri data, String type)方法对date进行设置。 要求和action相似：如果没有指定URI，默认值为content和file; 有多组data规则时，匹配其中一组即可。</p><p>采用隐式方式启动Activity时，可以用PackageManager的resolveActivity方法或者Intent的resolveActivity方法判断是否有Activity匹配该隐式Intent。</p><h3 id="亲和性-taskaffinity-属性" tabindex="-1"><a class="header-anchor" href="#亲和性-taskaffinity-属性" aria-hidden="true">#</a> 亲和性 taskAffinity 属性</h3><p>taskAffinity 属性采用字符串值，该值必须不同于 manifest 元素中声明的默认软件包名称，因为系统使用该名称来标识应用的默认任务亲和性。</p><ol><li>当启动 Activity 的 intent 包含 FLAG_ACTIVITY_NEW_TASK 标记时。</li></ol><p>默认情况下，新 Activity 会启动到调用 startActivity() 的 Activity 的任务中。它会被推送到调用方 Activity 所在的返回堆栈中。但是，如果传递给 startActivity() 的 intent 包含 FLAG_ACTIVITY_NEW_TASK 标记，则系统会寻找其他任务来容纳新 Activity。通常会是一个新任务，但也可能不是。如果已存在与新 Activity 具有相同亲和性的现有任务，则会将 Activity 启动到该任务中。如果不存在，则会启动一个新任务。</p><p>如果此标记导致 Activity 启动一个新任务，而用户按下主屏幕按钮离开该任务，则必须为用户提供某种方式来返回到该任务。有些实体（例如通知管理器）总是在外部任务中启动 Activity，而不在它们自己的任务中启动，因此它们总是将 FLAG_ACTIVITY_NEW_TASK 添加到传递给 startActivity() 的 intent 中。如果我们的 Activity 可由外部实体调用，而该实体可能使用此标记，请注意用户可以通过一种独立的方式返回到所启动的任务，例如使用启动器图标（任务的根 Activity 具有一个 CATEGORY_LAUNCHER intent 过滤器；请参阅下面的启动任务部分）。</p><ol start="2"><li>当 Activity 的 allowTaskReparenting 属性设为 &quot;true&quot; 时。</li></ol><p>在这种情况下，一旦和 Activity 有亲和性的任务进入前台运行，Activity 就可从其启动的任务转移到该任务。</p><p>举例来说，假设一款旅行应用中定义了一个报告特定城市天气状况的 Activity。该 Activity 与同一应用中的其他 Activity 具有相同的亲和性（默认应用亲和性），并通过此属性支持重新归属。当我们的某个 Activity 启动该天气预报 Activity 时，该天气预报 Activity 最初会和我们的 Activity 同属于一个任务。不过，当旅行应用的任务进入前台运行时，该天气预报 Activity 就会被重新分配给该任务并显示在其中。</p><h3 id="清除返回堆栈" tabindex="-1"><a class="header-anchor" href="#清除返回堆栈" aria-hidden="true">#</a> 清除返回堆栈</h3><p>如果用户离开任务较长时间，系统会清除任务中除根 Activity 以外的所有 Activity。当用户再次返回到该任务时，只有根 Activity 会恢复。系统之所以采取这种行为方式是因为，经过一段时间后，用户可能已经放弃了之前执行的操作，现在返回任务是为了开始某项新的操作。</p><p>我们可以使用一些 Activity 属性来修改此行为：</p><ul><li>alwaysRetainTaskState</li></ul><p>如果在任务的根 Activity 中将该属性设为 &quot;true&quot;，则不会发生上述默认行为。即使经过很长一段时间后，任务仍会在其堆栈中保留所有 Activity。</p><ul><li>clearTaskOnLaunch</li></ul><p>如果在任务的根 Activity 中将该属性设为 &quot;true&quot;，那么只要用户离开任务再返回，堆栈就会被清除到只剩根 Activity。也就是说，它与 alwaysRetainTaskState 正好相反。用户始终会返回到任务的初始状态，即便只是短暂离开任务也是如此。</p><ul><li>finishOnTaskLaunch</li></ul><p>该属性与 clearTaskOnLaunch 类似，但它只会作用于单个 Activity 而非整个任务。它还可导致任何 Activity 消失，包括根 Activity。如果将该属性设为 &quot;true&quot;，则 Activity 仅在当前会话中归属于任务。如果用户离开任务再返回，则该任务将不再存在。</p><h3 id="启动任务" tabindex="-1"><a class="header-anchor" href="#启动任务" aria-hidden="true">#</a> 启动任务</h3><p>当 Activity 具有 ACTION_MAIN 和 CATEGORY_LAUNCHER 过滤器时，才应使用 &quot;singleTask&quot; 和 &quot;singleInstance&quot; 这两种启动模式，它们会将 Activity 标记为始终启动任务。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name">...</span> <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token attr-name">...</span> <span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.action.MAIN<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.category.LAUNCHER<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span>
        ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="activity-通信" tabindex="-1"><a class="header-anchor" href="#activity-通信" aria-hidden="true">#</a> Activity 通信</h2><p>Activity 通信比较常见的有五种方式</p><h3 id="在intent跳转时携带数据" tabindex="-1"><a class="header-anchor" href="#在intent跳转时携带数据" aria-hidden="true">#</a> 在Intent跳转时携带数据</h3><p>Intent是Android四大组件（Activity、Service、BroadcastReceiver、ContentProvider）之间通信的纽带，在Intent中携带数据也是四大组件之间数据通信最常用、最普通的方式。常规写法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 第一种，创建用于封装数据的Bundle对象</span>
<span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bundle<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Activity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
intent<span class="token punctuation">.</span><span class="token function">putExtras</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将Bundle对象嵌入Intent中</span>
<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 第二种，比较简单的写法</span>
<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//程序自动创建Bundle，然后将对Intent添加的数据装载在Bundle中，对用户透明</span>
intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Activity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在SecondActivity中获取Intent跳转时携带的数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> age <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span><span class="token string">&quot;count&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Bundle传值对比在Intent里直接赋值的好处：</p><ul><li>减少重复赋值操作(需要传递多次)；</li><li>除了基本类型，还可以传实现Serializable 接口的对象；</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义对象实现接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token comment">//其他代码省略，和普通的bean一样</span>
<span class="token punctuation">}</span>
<span class="token comment">// 具体操作，将user对象传递</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bundle<span class="token punctuation">.</span><span class="token function">putSerializable</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
intent<span class="token punctuation">.</span><span class="token function">putExtras</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将数据取出</span>
<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>intent<span class="token punctuation">.</span><span class="token function">getSerializableExtra</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展：Android序列化Serializeble和Parcelable</p><h3 id="类的静态变量" tabindex="-1"><a class="header-anchor" href="#类的静态变量" aria-hidden="true">#</a> 类的静态变量</h3><p>由于类的静态成员可以通过“className.fileName”来访问，故而可以供两个Activity访问从而实现Activity之间的数据通信：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 在MainActivity中，访问SecondActivity中的静态值</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Son of the sea&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">SecondActivity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Son of the king&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 声明为静态file</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
         <span class="token comment">// 被MainActivity修改后，name已经不是king了。</span>
        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局变量-application实现" tabindex="-1"><a class="header-anchor" href="#全局变量-application实现" aria-hidden="true">#</a> 全局变量 Application实现</h3><p>和类的静态变量类似，但是这个类作为单独第三个类（最好是写一个Application类）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span>  <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span>
    <span class="token comment">//此处声明一个public static 成员来实现数据通信</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Son of the sea&quot;</span><span class="token punctuation">;</span> 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token class-name">MyApplication</span>  app <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">)</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Son of the king&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MyApplication 作为全局 Application 类，那么必须在 AndroidManifest.xml 中对 MyApplication 进行声明：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>
        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.MyApplication <span class="token punctuation">&quot;</span></span> 
        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@drawable/ic_launcher<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@string/app_name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>
            <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@string/app_name<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.MainActivity<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span> <span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.action.MAIN<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.intent.category.LAUNCHER<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="service服务" tabindex="-1"><a class="header-anchor" href="#service服务" aria-hidden="true">#</a> Service服务</h3><p>Service设计的本意，就是提供一些后台的服务，数据存取，也可以归于其职责的一部分。</p><p>Service是提供了直连机制，调用的Activity，可以通过bindService方法，与目标Service建立一条数据通路，拿到IBinder。这样，通过Android提供的IPC模型（进程间通信），就可以进行远程方法的调用和数据的传输了。</p><p>通过这种模式，可以解决一定问题，对于传数据而言，Service不但是有连接耗精力，传输经由IPC，写起来也够费劲。而且作为组件，Service随时可能死掉，要费劲心机的处理数据的持久化，不建议通过这种方式。</p><h3 id="存储实现通讯" tabindex="-1"><a class="header-anchor" href="#存储实现通讯" aria-hidden="true">#</a> 存储实现通讯</h3><p>参考Android 数据存储篇章</p>`,141),u=[l];function d(r,k){return a(),s("div",null,u)}const m=n(o,[["render",d],["__file","5.html.vue"]]);export{m as default};
