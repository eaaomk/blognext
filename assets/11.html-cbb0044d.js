import{_ as t,V as e,W as o,X as n,Y as a,$ as p,Z as c,F as l}from"./framework-bcbeea85.js";const i={},r=c(`<h1 id="broadcast-基础与使用" tabindex="-1"><a class="header-anchor" href="#broadcast-基础与使用" aria-hidden="true">#</a> Broadcast 基础与使用</h1><h2 id="广播简介" tabindex="-1"><a class="header-anchor" href="#广播简介" aria-hidden="true">#</a> 广播简介</h2><p>系统会在发生各种系统事件时自动发送广播，例如当系统进入和退出飞行模式时。系统广播会被发送给所有同意接收相关事件的应用。</p><p>广播消息本身会被封装在一个 Intent 对象中，该对象的操作字符串会标识所发生的事件（例如 android.intent.action.AIRPLANE_MODE）。该 Intent 可能还包含绑定到其 extra 字段中的附加信息。例如，飞行模式 intent 包含布尔值 extra 来指示是否已开启飞行模式。</p><h2 id="广播的定义" tabindex="-1"><a class="header-anchor" href="#广播的定义" aria-hidden="true">#</a> 广播的定义</h2><p>在 Android 中，Broadcast 是一种在应用程序之间传输信息的机制，要发送的广播内容是一个 Intent，这个 Intent 中可以携带我们要传送的数据。(数据小于1MB)</p><h2 id="广播的用途" tabindex="-1"><a class="header-anchor" href="#广播的用途" aria-hidden="true">#</a> 广播的用途</h2><ol><li>广播实现了不同程序之间的信息传输与共享，只要和发送广播的 action 相同的接收者，都能接收到这个广播。典型的应用就是 android 自带的短信，电话等等广播，只要我们实现了他们的 action 的广播，那么我们就能接收他们的数据了，以便做出一些处理。比如说拦截系统短信，拦截骚扰电话等。</li><li>作为通知的作用，比如在 Service 中要通知主程序、更新主程序的 UI 等，因为 Service 是没有界面的，所以不能直接获得主程序中的控件，这样我们就只能在主程序中实现一个广播接收者专门用来接收service发过来的数据和通知了。</li></ol><h2 id="广播的使用场景" tabindex="-1"><a class="header-anchor" href="#广播的使用场景" aria-hidden="true">#</a> 广播的使用场景</h2><ul><li>同一app内部的同一组件内的消息通信（单个或多个线程之间）(可用handler解决)；</li><li>同一app内部的不同组件之间的消息通信（单个进程）(可用EventBus)；</li><li>同一app具有多个进程的不同组件之间的消息通信；</li><li>不同app之间的组件之间的消息通信；</li><li>Android系统在特定情况下与App之间的消息通信。</li></ul><h2 id="广播主要的种类" tabindex="-1"><a class="header-anchor" href="#广播主要的种类" aria-hidden="true">#</a> 广播主要的种类</h2><ol><li><p>普通广播Normal Broadcast：异步执行的广播，所有接收者在同一时刻收到这条广播消息。效率高，没有先后顺序，无法截断。属于全局广播。调用 sendBroadcast()发送，最常用的广播。</p></li><li><p>有序广播Ordered Broadcast：同步执行的广播，发出去的广播会被广播接收者按照顺序接收，广播接收者按照Priority属性值从大-小排序，Priority属性相同者，动态注册的广播优先，广播接收者还可以选择对广播进行截断和修改。调用sendOrderedBroadcast()发送。</p></li><li><p>本地广播Local Broadcast：App应用内广播可理解为一种局部广播，广播的发送者和接收者都同属于一个App。相比于全局广播（普通广播），App应用内广播优势体现在：安全性高 &amp; 效率高。对于LocalBroadcastManager方式发送的应用内广播，只能通过LocalBroadcastManager动态注册，不能静态注册。调用sendBroadcast发送。</p></li></ol><h2 id="对应的广播action定义" tabindex="-1"><a class="header-anchor" href="#对应的广播action定义" aria-hidden="true">#</a> 对应的广播action定义</h2><p>Android SDK 中的 BROADCAST_ACTIONS.TXT 文件。每个广播操作都有一个与之关联的常量字段。例如，常量 ACTION_AIRPLANE_MODE_CHANGED 的值为 android.intent.action.AIRPLANE_MODE。每个广播操作的文档都可以在关联的常量字段中找到。</p><h2 id="静态注册接收广播" tabindex="-1"><a class="header-anchor" href="#静态注册接收广播" aria-hidden="true">#</a> 静态注册接收广播</h2><ol><li>在应用清单中指定 receiver 元素。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token operator">&lt;</span>receiver android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">&quot;.MyBroadcastReceiver&quot;</span>  android<span class="token operator">:</span>exported<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">&quot;android.intent.action.INPUT_METHOD_CHANGED&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>receiver<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建子类</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBroadcastReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>
            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">&quot;MyBroadcastReceiver&quot;</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Action: &quot;</span> <span class="token operator">+</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;URI: &quot;</span> <span class="token operator">+</span> intent<span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">URI_INTENT_SCHEME</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> log <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> log<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> log<span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_LONG</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态上下文注册的接收器" tabindex="-1"><a class="header-anchor" href="#动态上下文注册的接收器" aria-hidden="true">#</a> 动态上下文注册的接收器</h2><ol><li>注册接收</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">BroadcastReceiver</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBroadcastReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IntentFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token class-name">ConnectivityManager</span><span class="token punctuation">.</span><span class="token constant">CONNECTIVITY_ACTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    filter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span><span class="token constant">ACTION_AIRPLANE_MODE_CHANGED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerReceiver</span><span class="token punctuation">(</span>br<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>要停止接收广播</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>br<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>注意动态注册的需要在对应的方法中解除注册</li></ul><h2 id="两种注册方法的区别" tabindex="-1"><a class="header-anchor" href="#两种注册方法的区别" aria-hidden="true">#</a> 两种注册方法的区别</h2><ul><li>动态注册的接收器必须要在程序启动之后才能接收到广播；</li><li>静态注册的接收器即便程序未启动也能接收到广播，比如想接收到手机开机完成后系统发出的广播就只能用静态注册了。</li></ul><h2 id="广播的发送" tabindex="-1"><a class="header-anchor" href="#广播的发送" aria-hidden="true">#</a> 广播的发送</h2><ol><li>标准广播(异步)</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//通过sendBroadcast发送标准合家欢广播</span>
<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.songsong.MY_BROADCAST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sendBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>有序广播(同步)</li></ol><ul><li>定义：发送出去的广播被广播接收者按照先后顺序接收</li><li>接收广播的顺序规则（同时面向静态和动态注册的广播接受者） <ol><li>按照Priority属性值从大-小排序；</li><li>Priority属性相同者，动态注册的广播优先；</li></ol></li></ul><p>特点：</p><ul><li>接收广播按顺序接收；</li><li>先接收的广播接收者可以对广播进行截断，即后接收的广播接收者不再接收到此广播；</li><li>先接收的广播接收者可以对广播进行修改，那么后接收的广播接收者将接收到被修改后的广播</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//通过sendOrderBroadcast发送</span>
<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.songsong.MY_BROADCAST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sendOrderBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*给广播接收器设置优先级 */</span>
    <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter android<span class="token operator">:</span>priority<span class="token operator">=</span><span class="token string">&quot;100&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">&quot;com.example.broadcasttest.LOCAL_BROADCAST&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">&gt;</span>
<span class="token comment">//广播接收器截断：</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">abortBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>本地广播</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//发送1：实例化localBroadcastManager</span>
<span class="token class-name">LocalBroadcastManager</span> localBroadcastManager <span class="token operator">=</span> <span class="token class-name">LocalBroadcastManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//发送2：发送广播</span>
<span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
localBroadcastManager<span class="token punctuation">.</span><span class="token function">sendBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//接收1：实例化IntentFilter和接收器LocalReceiver</span>
<span class="token class-name">IntentFilter</span> intentFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">LocalReceiver</span> localReceiver  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//接收2：设置广播接收类型</span>
intentFilter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>android<span class="token punctuation">.</span>net<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token constant">CONNECTIVITY_CHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//接收3：进行动态注册本地广播</span>
localBroadcastManager<span class="token punctuation">.</span><span class="token function">registerReceiver</span><span class="token punctuation">(</span>localReceiver<span class="token punctuation">,</span> intentFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//接收4：在onDestroy中取消注册</span>
localBroadcastManager<span class="token punctuation">.</span><span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>localReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//接收5：在localReceiver中继承BroadcastReceiver并重写onReceiver。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对进程状态的影响" tabindex="-1"><a class="header-anchor" href="#对进程状态的影响" aria-hidden="true">#</a> 对进程状态的影响</h2><p>BroadcastReceiver 的状态（无论它是否在运行）会影响其所在进程的状态，而其所在进程的状态又会影响它被系统终结的可能性。例如，当进程执行接收器（即当前在运行其 onReceive() 方法中的代码）时，它被认为是前台进程。除非遇到极大的内存压力，否则系统会保持该进程运行。</p><p>但是，一旦从 onReceive() 返回代码，BroadcastReceiver 就不再活跃。接收器的宿主进程变得与在其中运行的其他应用组件一样重要。如果该进程仅托管清单声明的接收器（这对于用户从未与之互动或最近没有与之互动的应用很常见），则从 onReceive() 返回时，系统会将其进程视为低优先级进程，并可能会将其终止，以便将资源提供给其他更重要的进程使用。</p>`,40),u={href:"https://developer.android.google.cn/guide/components/broadcast-exceptions?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const s=l("ExternalLinkIcon");return e(),o("div",null,[r,n("ul",null,[n("li",null,[a("以 API 级别 26 或更高级别为目标的应用无法再在其清单中注册用于隐式广播的广播接收器，除了一些特殊的广播外:"),n("a",u,[a("官方文档"),p(s)])])])])}const b=t(i,[["render",d],["__file","11.html.vue"]]);export{b as default};
