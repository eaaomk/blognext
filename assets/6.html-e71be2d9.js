const t=JSON.parse('{"key":"v-7de68d99","path":"/posts/os/6.html","title":"线程的基本概念","lang":"zh-CN","frontmatter":{"lastUpdated":true,"description":"线程的基本概念 在20世纪60年代中期,人们在设计多道程序OS时,引入了进程的概念,从而解决了在单处理机环境下的程序并发执行问题。此后在长达20年的时间里,在多道程序OS中一直是以进程作为能拥有资源和独立调度(运行)的基本单位的。直到80年代中期,人们又提出了比进程更小的基本单位-线程的概念,试图用它来提高程序并发执行的程度,以进一步改善系统的服务质量。特别是在进入20世纪90年代后,多处理机系统得到迅速发展,由于线程能更好地提高程序的并行执行程度,因而近几年推出的多处理机OS无一例外地都引入了线程,用以改善OS的性能。 线程的引入 如果说,在OS中引入进程的目的是为了使多个程序能并发执行,以提高资源利用率和系统吞吐量,那么,在操作系统中再引入线程,则是为了减少程序在并发执行时所付出的时空开销,使OS具有更好的并发性。","head":[["meta",{"property":"og:url","content":"https://eaaomk.github.io/blognext/blognext/posts/os/6.html"}],["meta",{"property":"og:site_name","content":"欢迎你"}],["meta",{"property":"og:title","content":"线程的基本概念"}],["meta",{"property":"og:description","content":"线程的基本概念 在20世纪60年代中期,人们在设计多道程序OS时,引入了进程的概念,从而解决了在单处理机环境下的程序并发执行问题。此后在长达20年的时间里,在多道程序OS中一直是以进程作为能拥有资源和独立调度(运行)的基本单位的。直到80年代中期,人们又提出了比进程更小的基本单位-线程的概念,试图用它来提高程序并发执行的程度,以进一步改善系统的服务质量。特别是在进入20世纪90年代后,多处理机系统得到迅速发展,由于线程能更好地提高程序的并行执行程度,因而近几年推出的多处理机OS无一例外地都引入了线程,用以改善OS的性能。 线程的引入 如果说,在OS中引入进程的目的是为了使多个程序能并发执行,以提高资源利用率和系统吞吐量,那么,在操作系统中再引入线程,则是为了减少程序在并发执行时所付出的时空开销,使OS具有更好的并发性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-28T15:26:49.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-28T15:26:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程的基本概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-28T15:26:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"线程的引入","slug":"线程的引入","link":"#线程的引入","children":[]},{"level":3,"title":"线程与进程的比较","slug":"线程与进程的比较","link":"#线程与进程的比较","children":[]},{"level":3,"title":"线程的状态和线程控制块","slug":"线程的状态和线程控制块","link":"#线程的状态和线程控制块","children":[]}],"git":{"createdTime":1674919609000,"updatedTime":1674919609000,"contributors":[{"name":"qiang.zhang","email":"eaaomk@163.com","commits":1}]},"readingTime":{"minutes":14.09,"words":4228},"filePathRelative":"posts/os/6.md","localizedDate":"2023年1月28日","excerpt":"<h1> 线程的基本概念</h1>\\n<p>在20世纪60年代中期,人们在设计多道程序OS时,引入了进程的概念,从而解决了在单处理机环境下的程序并发执行问题。此后在长达20年的时间里,在多道程序OS中一直是以进程作为能拥有资源和独立调度(运行)的基本单位的。直到80年代中期,人们又提出了比进程更小的基本单位-线程的概念,试图用它来提高程序并发执行的程度,以进一步改善系统的服务质量。特别是在进入20世纪90年代后,多处理机系统得到迅速发展,由于线程能更好地提高程序的并行执行程度,因而近几年推出的多处理机OS无一例外地都引入了线程,用以改善OS的性能。</p>\\n<h3> 线程的引入</h3>\\n<p>如果说,在OS中引入进程的目的是为了使多个程序能并发执行,以提高资源利用率和系统吞吐量,那么,在操作系统中再引入线程,则是为了减少程序在并发执行时所付出的时空开销,使OS具有更好的并发性。</p>","autoDesc":true}');export{t as data};
