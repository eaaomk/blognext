import{_ as n,V as t,W as a,Z as s}from"./framework-bcbeea85.js";const i={},e=s(`<h1 id="activity-问题大盘点" tabindex="-1"><a class="header-anchor" href="#activity-问题大盘点" aria-hidden="true">#</a> Activity 问题大盘点</h1><p>旧页面以下简称A1 新的页面以下简称A2</p><ol><li>打开透明Acitivty的生命周期？</li></ol><p>当A2是透明主题时，A1不会走onStop，会停留在onPause，此时事件无法传递到A2，因为A1当前是无法交互的，当前处于onResume 的是A2。</p><ol start="2"><li>打开对话框Acitivty的生命周期？</li></ol><p>打开对话框A2时，A1此时处于局部可见，只会走向onPause，不会走向onStop。 此时如果关闭屏幕或者按Home按键，A2-onPause()--&gt;onStop()--&gt;A1-onStop()</p><p>点亮屏幕/回到前台：A2-onRestart()-&gt;onStart()-&gt;A1-onRestart()-&gt;onStart()-&gt;A2-onResume()</p><p>关闭对话框: A1-onPause()-&gt;A1-onResume()-&gt;A2-onStop()-&gt;onDestroy()</p><ol start="3"><li>谈谈onSaveInstanceState()方法，何时会调用？在Activity中如何保存/恢复状态？</li></ol><ul><li><p>当非人为终止Activity时，比如系统配置发生改变时导致Activity被杀死并重新创建、资源内存不足导致低优先级的Activity被杀死，会调用 onSavaInstanceState() 来保存状态。</p></li><li><p>该方法调用在onStop之前，但和onPause没有时序关系。</p></li><li><p>onSaveInstanceState 与 onPause 的区别：</p><p>前者适用于对临时性状态的保存，而后者适用于对数据的持久化保存。 onPause在Activity部分不可见的时候被调用，onSaveInstanceState在需要空出内存给当前Activity的时候执行。</p></li><li><p>恢复数据</p><p>Activity被重新创建时会调用onRestoreInstanceState（该方法在onStart之后），并将onSavaInstanceState保存的Bundle对象作为参数传到onRestoreInstanceState与onCreate方法，并取出数据进行恢复.（在onCreate取出数据时一定要先判断savedInstanceState是否为空）</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//MainActivity 中添加代码进行临时保存</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> outState<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> tempData <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>
    outState<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">&quot;data_key&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;tempData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//MainActivity的onCreate()方法中修改如下：</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> saveInstanceState<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>saveInstanceState <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> tempData <span class="token operator">=</span> savedInstanceState<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;data_key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>说一下Activity的四种状态？</li></ol><ul><li>running：处于活动状态，用户可以点击屏幕，屏幕会做出响应，处于Activity 的栈顶。</li><li>paused：处于失去焦点状态或者被不透明的布局局部覆盖，又或者被一个透明的布局全局覆盖。Activity只是失去和用户的交互能力，处于内存紧张状态。</li><li>stopped：被另外的 Activity 全屏覆盖，不再是可见的，</li><li>killed：Activity 已经被系统回收掉了。</li></ul><ol start="5"><li>说一下Activity中通信的几种方式？</li></ol><ul><li>在Intent跳转时携带数据</li><li>借助类的静态变量</li><li>借助全局变量 Application</li><li>借助外部存储来实现通讯：SharedPreference，SQLite，File</li><li>Service</li></ul><ol start="6"><li><p>Activity上有 Dialog 时按Home键的生命周期？ 生命周期是：onCreate() -&gt; onStart() -&gt; onResume -&gt; 启动Dialog-&gt; home键 -&gt; onPause() -&gt; onStop()</p></li><li><p>Activity与Fragment之间生命周期比较</p></li></ol><ul><li>Activity——onCreate-&gt;onStart-&gt;onResume-&gt;onPause-&gt;onStop-&gt;onDestroy</li><li>Fragment——onAttach-&gt;onCreate-&gt;onCreateView-&gt;onActivityCreated-&gt;onStart-&gt;onResume -&gt;onPause-&gt;onStop-&gt;onDestroyView-&gt; onDestroy-&gt;onDetach</li></ul><ol start="8"><li>Activity 进程优先级？被杀死的先后顺序？</li></ol><ul><li>前台进程：处于与用户交互的 Activity，或者在前台绑定的 Service。</li><li>可见进程：处于前台，但用户又不能点击的情况下。</li><li>服务进程：在后台开启 Service服务。</li><li>后台进程：用户按了Home键回到了桌面，根据内存情况作出相应的回收。</li><li>空进程：优先级最低，处于缓存的目的而保留，系统随时杀掉。</li></ul><ol start="9"><li>scheme 跳转协议是什么？</li></ol><p>scheme 是一种页面跳转协议，通过定义自己的scheme协议，可以非常方便跳转app的各个页面； 通过scheme 协议，服务器可以定制化告诉App跳转哪个页面，可以通过通知栏消息定制化跳转页面，也可以通过H5页面跳转页面。</p><ul><li>服务端下发url，客户端根据url跳转到相应的页面。</li><li>H5跳转到App相应的Activity。</li><li>App根据url跳转到另一个App指定页面。</li></ul><ol start="10"><li>如何快速退出所有Activity(关闭多个Activity)？</li></ol><ul><li>记录打开的Acitivity，只需要用一个专门的收集类对所有的活动进行管理就可以了，新建 ActivityCollector 类作为活动管理器。在BaseActivity中的onCreate方法中调用 ActivityCollector.addActivity(this);即可</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivityCollector</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Activity</span><span class="token punctuation">&gt;</span></span>activities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addActivity</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span><span class="token punctuation">{</span>
    activities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remoeActivity</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span><span class="token punctuation">{</span>
    activities<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">finishAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity <span class="token operator">:</span> activities<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>activity<span class="token punctuation">.</span><span class="token function">isFinishing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                activity<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        activities<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>发送特定广播，需要结束应用时，给每个Activity收到广播后，关闭即可。</p></li><li><p>递归退出，在打开新的 Activity 时使用 startActivityForResult，然后自己加标志，在 onActivityResult 中处理，递归关闭。</p></li><li><p>通过 intent 的 flag 来实现 intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)激活一个新的 activity。此时如果该任务栈中已经有该 Activity，那么系统会把这个 Activity 上面的所有 Activity 干掉。相当于给 Activity 配置的启动模式为 SingleTop。</p></li></ul><ol start="11"><li>如何将一个Activity设置成窗口样式？</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>android:theme=&quot;@android:style/Theme.Dialog&quot;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="12"><li>gravity 和 layout_gracity 的区别？</li></ol><ul><li>android:gravity：用于指定文字在控件中的对齐方式；</li><li>android:layout_gracity：用于指定控件在布局中的对齐方式。</li><li>android:layout_weight：使用比例方式来指定控件的大小。</li></ul><ol start="13"><li>Android 中的 Context, Activity，Appliction 有什么区别？</li></ol><ul><li><p>相同：Activity 和 Application 都是 Context 的子类。</p><p>Context 从字面上理解就是上下文的意思，在实际应用中它也确实是起到了管理上下文环境中各个参 数和变量的作用，方便我们可以简单的访问到各种资源。</p></li><li><p>不同：维护的生命周期不同。 Context 维护的是当前的 Activity 的生命周期，Application 维护的是整个项目的生命周期。</p></li></ul><p>使用 context 的时候，小心内存泄露，防止内存泄露，注意一下几个方面：</p><ul><li>不要让生命周期长的对象引用 activity context，即保证引用 activity 的对象要与 activity 本身生命周期是一样的。</li><li>对于生命周期长的对象，可以使用 application，context。</li><li>避免非静态的内部类，尽量使用静态类，避免生命周期问题，注意内部类对外部对象引用导致 的生命周期变化。</li></ul><ol start="14"><li>Context 是什么？</li></ol><ul><li>它描述的是一个应用程序环境的信息，即上下文。</li><li>该类是一个抽象(abstract class)类，Android 提供了该抽象类的具体实现类（ContextIml）。</li><li>通过它我们可以获取应用程序的资源和类，也包括一些应用级别操作，例如：启动一个 Activity，发送广播，接受 Intent，信息等。</li></ul><ol start="15"><li>launchMode之singleTask与taskAffinity</li></ol><p>taskAffinity是用来指示Activity属于哪一个Task的。taskAffinity能够决定以下两件事情（前提是Activity的launchMode为singleTask或者设置了FLAG_ACTIVITY_NEW_TASK），默认情况下，在一个app中的所有Activity都有一样的taskAffinity，但是我们可以设置不同的taskAffinity，为这些Activity分Task。甚至可以在不同的app之中，设置相同的taskAffinity，以达到不同app的activity公用同一个Task的目的。</p><ol start="16"><li>Activity的布局文件是如何被加载的呢？</li></ol><p>Activity是使用setContentView来设置一个布局的。 Activity通常包含Window对象，由PhoneWindow来实现Window对象。 PhoneWindow将一个DecorView设置为整个应用窗口都根View。 DecorView作为窗口界面都顶层视图，封装了一些窗口操作都通用的方法。</p><ol start="17"><li>如何启动其他应用的Activity？</li></ol><p>思路：可从隐式Intent角度出发</p><p>在保证有权限访问的情况下，通过隐式Intent进行目标Activity的IntentFilter匹配，原则是：</p><p>一个intent只有同时匹配某个Activity的intent-filter中的action、category、data才算完全匹配，才能启动该Activity。 一个Activity可以有多个 intent-filter，一个 intent只要成功匹配任意一组 intent-filter，就可以启动该Activity。</p><ol start="18"><li>Activity的启动过程？</li></ol><p>调用startActivity()后经过重重方法会转移到ActivityManagerService的startActivity()，并通过一个IPC回到ActivityThread的内部类ApplicationThread中，并调用其scheduleLaunchActivity()将启动Activity的消息发送并交由Handler H处理。Handler H对消息的处理会调用handleLaunchActivity()-&gt;performLaunchActivity()得以完成Activity对象的创建和启动。</p><p>扩展：Activity的启动过程源码解读</p><ol start="19"><li>横竖屏切换时 Activity 的生命周期?</li></ol><p>此时的生命周期跟清单文件里的配置有关系。</p><p>不设置 Activity 的 android:configChanges 时，切屏会重新调用各个生命周期默认首先销毁当前activity,然后重新加载。</p><p>设置 Activity的android:configChanges=&quot;orientation|keyboardHidden|screenSize&quot;时，切屏不会重新调用各个生命周期，只会执行 onConfigurationChanged 方法。</p><p>通常在游戏开发中, 屏幕的朝向都是写死的。</p><ol start="20"><li>两个 Activity 之间跳转时必然会执行的是哪几个方法？</li></ol><p>当在A里面激活B组件的时候, A会调用 onPause()方法,然后 B 调用 onCreate() ,onStart(), onResume()。 这个时候 B 覆盖了窗体, A 会调用 onStop()方法. 如果 B 是个透明的,或者是对话框的样式, 就不会调用 A 的 onStop()方法。</p><ol start="21"><li>Activity 的四种启动模式，singletop 和 singletask 区别是什么？</li></ol><ul><li><p>singleTask和singletop都是保证了Activity在栈中的唯一性</p></li><li><p>singleTask和singleTop实例存在时，都不会重新创建 new task</p></li></ul><p>不同之处有如下几点：</p><ul><li><p>如果singleTask启动的ActivityA位于栈底，在栈顶startActivity到这个ActivityA时会调动 onNewIntent-&gt;onStart-&gt;onResume。但singleTask启动的的ActivityA不存在时，会重新创建ActivityA,调用方式OnCreate-&gt;OnStart-&gt;OnResume</p></li><li><p>如果singletop启动的ActivityB在栈底时，在栈顶startActivity到这个ActivityB时会重新调动 onCreate-&gt;onStart-&gt;onResume，但不会调用OnDestroy，且singletop启动的的ActivityB不存在时，会重新创建ActivityB,调用方式OnCreate-&gt;OnStart-&gt;OnResume</p></li><li><p>singleTask在栈底时，从栈顶startActivity到栈底ActivityA,那么该栈startActivity的发起者的中间部分Activity会被销毁。而singletop是逐级跳跃到栈顶</p></li><li><p>singleTask不适合充当ChildActivity，但singletop适合</p></li><li><p>对作业栈，默认情况下，没有任何影响，因为栈的taskid是相同的，可以获取getTaskid()，默认情况下每个activity的taskid相同。但是，如果自定义了栈的标签（这个标签相同的singletask activity在同一个作业栈中），那么taskid就会初选差别android:taskAffinity=&quot;com.sample.lanchmode.tester.main&quot;，一旦另一个作业栈被销毁，下次必然重建。</p></li></ul><ol start="22"><li>Activity 的四种启动模式，一般书签的使用模式是 singletop，那为什么不使用 singletask？</li></ol><p>singletask属性是如果在栈中已经有该Activity的实例，就重用该实例(会调用实例的 onNewIntent() )。重用时，会让该实例回到栈顶，因此在它上面的实例将会被移出栈。彻底改变了栈内的位置顺序。</p>`,60),l=[e];function o(p,c){return t(),a("div",null,l)}const r=n(i,[["render",o],["__file","6.html.vue"]]);export{r as default};
