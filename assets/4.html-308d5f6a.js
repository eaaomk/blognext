const t=JSON.parse('{"key":"v-1a19c0c6","path":"/posts/java/4.html","title":"设计模式2","lang":"zh-CN","frontmatter":{"lastUpdated":true,"description":"设计模式2 适配器模式（Adapter Pattern） 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。 适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。 这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。","head":[["meta",{"property":"og:url","content":"https://eaaomk.github.io/blognext/blognext/posts/java/4.html"}],["meta",{"property":"og:site_name","content":"欢迎你"}],["meta",{"property":"og:title","content":"设计模式2"}],["meta",{"property":"og:description","content":"设计模式2 适配器模式（Adapter Pattern） 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。 适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。 这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-29T13:57:58.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-29T13:57:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式2\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-29T13:57:58.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"适配器模式（Adapter Pattern）","slug":"适配器模式-adapter-pattern","link":"#适配器模式-adapter-pattern","children":[{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]}]},{"level":2,"title":"桥接模式（Bridge Pattern）","slug":"桥接模式-bridge-pattern","link":"#桥接模式-bridge-pattern","children":[{"level":3,"title":"实现","slug":"实现-1","link":"#实现-1","children":[]}]},{"level":2,"title":"过滤器模式（Filter、Criteria Pattern）","slug":"过滤器模式-filter、criteria-pattern","link":"#过滤器模式-filter、criteria-pattern","children":[{"level":3,"title":"实现","slug":"实现-2","link":"#实现-2","children":[]}]},{"level":2,"title":"组合模式（Composite Pattern）","slug":"组合模式-composite-pattern","link":"#组合模式-composite-pattern","children":[{"level":3,"title":"实现","slug":"实现-3","link":"#实现-3","children":[]}]},{"level":2,"title":"装饰器模式（Decorator Pattern）","slug":"装饰器模式-decorator-pattern","link":"#装饰器模式-decorator-pattern","children":[{"level":3,"title":"实现","slug":"实现-4","link":"#实现-4","children":[]}]},{"level":2,"title":"外观模式（Facade Pattern）","slug":"外观模式-facade-pattern","link":"#外观模式-facade-pattern","children":[{"level":3,"title":"实现","slug":"实现-5","link":"#实现-5","children":[]}]},{"level":2,"title":"享元模式（Flyweight Pattern）","slug":"享元模式-flyweight-pattern","link":"#享元模式-flyweight-pattern","children":[{"level":3,"title":"实现","slug":"实现-6","link":"#实现-6","children":[]}]},{"level":2,"title":"代理模式（Proxy Pattern）","slug":"代理模式-proxy-pattern","link":"#代理模式-proxy-pattern","children":[{"level":3,"title":"实现","slug":"实现-7","link":"#实现-7","children":[]}]}],"git":{"createdTime":1675000678000,"updatedTime":1675000678000,"contributors":[{"name":"qiang.zhang","email":"eaaomk@163.com","commits":1}]},"readingTime":{"minutes":24.35,"words":7306},"filePathRelative":"posts/java/4.md","localizedDate":"2023年1月29日","excerpt":"<h1> 设计模式2</h1>\\n<h2> 适配器模式（Adapter Pattern）</h2>\\n<ul>\\n<li>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</li>\\n</ul>\\n<p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p>\\n<p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。</p>\\n","autoDesc":true}');export{t as data};
