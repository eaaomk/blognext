import{_ as e,V as t,W as a,Z as r}from"./framework-bcbeea85.js";const n={},i=r('<h1 id="表示层设计模式分类" tabindex="-1"><a class="header-anchor" href="#表示层设计模式分类" aria-hidden="true">#</a> 表示层设计模式分类</h1><ul><li>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。</li></ul><h2 id="mvc模式-mvc-pattern" tabindex="-1"><a class="header-anchor" href="#mvc模式-mvc-pattern" aria-hidden="true">#</a> MVC模式（MVC Pattern）</h2><h2 id="业务代表模式-business-delegate-pattern" tabindex="-1"><a class="header-anchor" href="#业务代表模式-business-delegate-pattern" aria-hidden="true">#</a> 业务代表模式（Business Delegate Pattern）</h2><h2 id="组合实体模式-composite-entity-pattern" tabindex="-1"><a class="header-anchor" href="#组合实体模式-composite-entity-pattern" aria-hidden="true">#</a> 组合实体模式（Composite Entity Pattern）</h2><h2 id="数据访问对象模式-data-access-object-pattern" tabindex="-1"><a class="header-anchor" href="#数据访问对象模式-data-access-object-pattern" aria-hidden="true">#</a> 数据访问对象模式（Data Access Object Pattern）</h2><h2 id="前端控制器模式-front-controller-pattern" tabindex="-1"><a class="header-anchor" href="#前端控制器模式-front-controller-pattern" aria-hidden="true">#</a> 前端控制器模式（Front Controller Pattern）</h2><h2 id="拦截过滤器模式-intercepting-filter-pattern" tabindex="-1"><a class="header-anchor" href="#拦截过滤器模式-intercepting-filter-pattern" aria-hidden="true">#</a> 拦截过滤器模式（Intercepting Filter Pattern）</h2><h2 id="服务定位器模式-service-locator-pattern" tabindex="-1"><a class="header-anchor" href="#服务定位器模式-service-locator-pattern" aria-hidden="true">#</a> 服务定位器模式（Service Locator Pattern）</h2><h2 id="传输对象模式-transfer-object-pattern" tabindex="-1"><a class="header-anchor" href="#传输对象模式-transfer-object-pattern" aria-hidden="true">#</a> 传输对象模式（Transfer Object Pattern）</h2>',10),c=[i];function h(d,s){return t(),a("div",null,c)}const l=e(n,[["render",h],["__file","6.html.vue"]]);export{l as default};
