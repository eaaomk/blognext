import{_ as n,V as s,W as a,Z as e}from"./framework-bcbeea85.js";const t={},p=e(`<h1 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h1><p>这里我个人只推荐使用RecyclerView，RecyclerView是官方推荐代替Listview和GridView用的， 简单说，Listview和GridView能做的，RecyclerView都能做。</p><h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局" aria-hidden="true">#</a> 布局</h2><p>RecyclerView 中的列表项由 LayoutManager 类负责排列。RecyclerView 库提供了三种布局管理器，用于处理最常见的布局情况：</p><ul><li><p>LinearLayoutManager 将各个项排列在一维列表中。</p></li><li><p>GridLayoutManager 将所有项排列在二维网格中： 如果网格垂直排列，GridLayoutManager 会尽量使每行中所有元素的宽度和高度相同，但不同的行可以有不同的高度。 如果网格水平排列，GridLayoutManager 会尽量使每列中所有元素的宽度和高度相同，但不同的列可以有不同的宽度。</p></li><li><p>StaggeredGridLayoutManager 与 GridLayoutManager 类似，但不要求同一行中的列表项具有相同的高度（垂直网格有此要求）或同一列中的列表项具有相同的宽度（水平网格有此要求）。其结果是，同一行或同一列中的列表项可能会错落不齐。</p></li><li><p>如果上面都不满足我们日常的开发需求，可以通过扩展 RecyclerView.LayoutManager 抽象类来创建自己的布局管理器。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token class-name">LinearLayoutManager</span> linearLayoutManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinearLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token class-name">RecyclerView</span><span class="token punctuation">.</span><span class="token constant">HORIZONTAL</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">GridLayoutManager</span> gridLayoutManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GridLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">StaggeredGridLayoutManager</span> staggeredGridLayoutManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaggeredGridLayoutManager</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token class-name">RecyclerView</span><span class="token punctuation">.</span><span class="token constant">VERTICAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   recyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span>linearLayoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
   recyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span>gridLayoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
   recyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span>staggeredGridLayoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="recyclerview-的基本使用" tabindex="-1"><a class="header-anchor" href="#recyclerview-的基本使用" aria-hidden="true">#</a> RecyclerView 的基本使用</h2><h3 id="实现-adapter-和-viewholder" tabindex="-1"><a class="header-anchor" href="#实现-adapter-和-viewholder" aria-hidden="true">#</a> 实现 Adapter 和 ViewHolder</h3><p>定义 Adapter 时，需要替换三个关键方法：</p><ul><li><p>onCreateViewHolder()：每当 RecyclerView 需要创建新的 ViewHolder 时，它都会调用此方法。此方法会创建并初始化 ViewHolder 及其关联的 View，但不会填充视图的内容，因为 ViewHolder 此时尚未绑定到具体数据。</p></li><li><p>onBindViewHolder()：RecyclerView 调用此方法将 ViewHolder 与数据相关联。此方法会提取适当的数据，并使用该数据填充 ViewHolder 的布局。例如，如果 RecyclerView 显示的是一个名称列表，该方法可能会在列表中查找适当的名称，并填充 ViewHolder 的 TextView widget。</p></li><li><p>getItemCount()：RecyclerView 调用此方法来获取数据集的大小。例如，在通讯簿应用中，这可能是地址总数。RecyclerView 使用此方法来确定什么时候没有更多的列表项可以显示。</p></li></ul><p>代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomAdapter<span class="token punctuation">.</span>ViewHolder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> localDataSet<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Provide a reference to the type of views that you are using
     * (custom ViewHolder).
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ViewHolder</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TextView</span> textView<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ViewHolder</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Define click listener for the ViewHolder&#39;s View</span>

            textView <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextView</span><span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>textView<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">TextView</span> <span class="token function">getTextView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> textView<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

     <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Type</span><span class="token punctuation">{</span>
        <span class="token class-name">A</span><span class="token punctuation">,</span>
        <span class="token class-name">B</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemViewType</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// return item.type 返回数据的类型，可以根据不同的type生成不同的item，比如微信好友列表的实现</span>
        <span class="token comment">// return Type.A.ordinal();</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getItemViewType</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Initialize the dataset of the Adapter.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">dataSet</span> String[] containing the data to populate views to be used
     * by RecyclerView.
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomAdapter</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dataSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        localDataSet <span class="token operator">=</span> dataSet<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Create new views (invoked by the layout manager)</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ViewHolder</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span><span class="token class-name">ViewGroup</span> viewGroup<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Create a new view, which defines the UI of the list item</span>
        <span class="token class-name">View</span> view <span class="token operator">=</span> <span class="token class-name">LayoutInflater</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>viewGroup<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>text_row_item<span class="token punctuation">,</span> viewGroup<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//  if(viewType ==  Type.A.ordinal()){</span>
        <span class="token comment">//      View view = LayoutInflater.from(viewGroup.getContext())</span>
        <span class="token comment">//              .inflate(R.layout.other_a_row_item, viewGroup, false);</span>
        <span class="token comment">//  }</span>
        <span class="token comment">//  else{</span>
        <span class="token comment">//      View view = LayoutInflater.from(viewGroup.getContext())</span>
        <span class="token comment">//              .inflate(R.layout.other_b_row_item, viewGroup, false);</span>
        <span class="token comment">//  }</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ViewHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Replace the contents of a view (invoked by the layout manager)</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token class-name">ViewHolder</span> viewHolder<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// Get element from your dataset at this position and replace the</span>
        <span class="token comment">// contents of the view with that element</span>
        viewHolder<span class="token punctuation">.</span><span class="token function">getTextView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>localDataSet<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 可自定义接口实现item的点击长按等监听事件</span>

        <span class="token keyword">final</span> <span class="token keyword">int</span> currentIndex <span class="token operator">=</span> position<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>onItemOnclickListener<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            viewHolder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    onItemOnclickListener<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>localDataSet<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// viewHolder.itemView.setOnLongClickListener(new View.OnLongClickListener() {</span>
            <span class="token comment">//          @Override</span>
            <span class="token comment">//          public boolean onLongClick(View v) {</span>
            <span class="token comment">//              return false;</span>
            <span class="token comment">//          }</span>
            <span class="token comment">//      });</span>
            <span class="token comment">//</span>
            <span class="token comment">// viewHolder.itemView.setOnTouchListener(new View.OnTouchListener() {</span>
            <span class="token comment">//          @Override</span>
            <span class="token comment">//          public boolean onTouch(View v, MotionEvent event) {</span>
            <span class="token comment">//              return false;</span>
            <span class="token comment">//          }</span>
            <span class="token comment">//      });</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 为了更方便的展示效果，将相关的代码放在挨得近的地方</span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnItemOnclickListener</span><span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">OnItemOnclickListener</span> onItemOnclickListener<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnItemOnclickListener</span><span class="token punctuation">(</span><span class="token class-name">OnItemOnclickListener</span> onItemOnclickListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onItemOnclickListener <span class="token operator">=</span> onItemOnclickListener<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Return the size of your dataset (invoked by the layout manager)</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> localDataSet<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子item的布局xml 文件：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--- text_row_item.xml --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@dimen/list_item_height<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@dimen/margin_medium<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@dimen/margin_medium<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center_vertical<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>
        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/textView<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@string/element_text<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FrameLayout</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为列表项添加动画" tabindex="-1"><a class="header-anchor" href="#为列表项添加动画" aria-hidden="true">#</a> 为列表项添加动画</h2><p>每当某个项发生变化时，RecyclerView 都会使用 animator 来更改其外观。该 animator 是一个扩展抽象 RecyclerView.ItemAnimator 类的对象。默认情况下，RecyclerView 使用 DefaultItemAnimator 来提供动画。如果想提供自定义动画，可以通过扩展 RecyclerView.ItemAnimator 来定义自己的 animator 对象。</p><h2 id="启用列表项选择" tabindex="-1"><a class="header-anchor" href="#启用列表项选择" aria-hidden="true">#</a> 启用列表项选择</h2><p>借助 recyclerview-selection 库，用户可以通过触摸或鼠标输入来选择 RecyclerView 列表中的项。仍然可以控制所选项的视觉呈现效果。也仍然可以控制用于约束选择行为的政策，例如符合入选条件的项以及可以选择的项数。</p><p>如需为 RecyclerView 实例添加对选择操作的支持，可以按以下步骤操作：</p><ol><li><p>确定要使用的选择键类型，然后构建 ItemKeyProvider。 有三种键类型可供标识所选项：Parcelable（以及所有子类，如 Uri）、String 和 Long。选择键类型，参阅 SelectionTracker.Builder。</p></li><li><p>实现 ItemDetailsLookup。 ItemDetailsLookup 使选择功能库能够访问给定 MotionEvent 对应的 RecyclerView 项的相关信息。它实际上是由 RecyclerView.ViewHolder 实例支持（或从中提取）的 ItemDetails 实例的工厂。</p></li><li><p>更新 RecyclerView 中的 Views 项，以反映用户已将其选中或取消选中。 选择功能库不会为所选项提供默认视觉装饰。必须在实现 onBindViewHolder() 时提供此设置。建议采用如下方法：</p><p>在onBindViewHolder() 中，对 View 对象调用 setActivated()（而不是 setSelected()）并传入 true 或 false（具体取决于对应的项否处于选中状态）。 更新视图样式以表示已激活状态。建议使用颜色状态列表资源来配置样式。</p></li><li><p>使用 ActionMode 为用户提供对所选项执行操作所需的工具。 注册 SelectionTracker.SelectionObserver 以在选择状态有变时接收通知。首次选择时，请启动 ActionMode 以向用户表示这一点，并提供特定于该选择的操作。例如，可以向 ActionMode 栏添加删除按钮，然后将栏上的返回箭头连接到取消选择的操作。当选择列表变空时（如果用户取消选择最后一项），请不要忘记终止操作模式。</p></li><li><p>执行任何经过解释的次级操作 在事件处理流水线的最后，库可能会判断用户试图通过点按某个项来激活它或试图拖放某个项或一组选定项。请通过注册适当的监听器来回应这些解释。参阅 SelectionTracker.Builder。</p></li><li><p>使用 SelectionTracker.Builder 汇编所有内容，将这些部分组合在一起</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SelectionTracker</span> tracker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectionTracker<span class="token punctuation">.</span>Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
        <span class="token string">&quot;my-selection-id&quot;</span><span class="token punctuation">,</span>
        recyclerView<span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">StableIdKeyProvider</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">MyDetailsLookup</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">StorageStrategy</span><span class="token punctuation">.</span><span class="token function">createLongStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withOnItemActivatedListener</span><span class="token punctuation">(</span>myItemActivatedListener<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建 SelectionTracker 实例，必须向 SelectionTracker.Builder 提供之前初始化 RecyclerView 时所用的同一个 RecyclerView.Adapter。因此，创建 RecyclerView.Adapter 后，需要在 SelectionTracker 实例一经创建后就将其注入到 RecyclerView.Adapter 中。否则，将无法通过 onBindViewHolder() 方法检查某个项的已选中状态。</p><ol start="7"><li>构建 SelectionTracker 实例，必须向 SelectionTracker.Builder 提供之前初始化 RecyclerView 时所用的同一个 RecyclerView.Adapter。因此，创建 RecyclerView.Adapter 后，需要在 SelectionTracker 实例一经创建后就将其注入到 RecyclerView.Adapter 中。否则，将无法通过 onBindViewHolder() 方法检查某个项的已选中状态。</li></ol>`,23),c=[p];function i(o,l){return s(),a("div",null,c)}const r=n(t,[["render",i],["__file","7.html.vue"]]);export{r as default};
